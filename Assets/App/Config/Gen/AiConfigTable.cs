//-----------------------------------------
//<auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//</auto-generated>
//------------------------------------------
// Generated from :AiConfig.csv

using System.Collections.Generic;
using System.IO;
using System.Text;

public partial class AiConfig
{
    private int __Id;
    public int Id
    {
        internal set{ __Id = value; }
        get{ return __Id; }
    }
    private string __Name;
    public string Name
    {
        internal set{ __Name = value; }
        get{ return __Name; }
    }
    private int __Height;
    public int Height
    {
        internal set{ __Height = value; }
        get{ return __Height; }
    }
    private int __Weight;
    public int Weight
    {
        internal set{ __Weight = value; }
        get{ return __Weight; }
    }
    private string __PersonalSignature;
    public string PersonalSignature
    {
        internal set{ __PersonalSignature = value; }
        get{ return __PersonalSignature; }
    }
    private int __UnlockCost;
    public int UnlockCost
    {
        internal set{ __UnlockCost = value; }
        get{ return __UnlockCost; }
    }
    private AssetRef __IconRes;
    public AssetRef IconRes
    {
        internal set{ __IconRes = value; }
        get{ return __IconRes; }
    }
    private string __Prompt;
    public string Prompt
    {
        internal set{ __Prompt = value; }
        get{ return __Prompt; }
    }
}

public class AiConfigTable : DFDev.CSVConfig.ConfigBase
{
    static string __config_file_name = "AiConfig";
    public static string ConfigName => __config_file_name;
    static int __col_count = 8;

    private readonly Dictionary<int,AiConfig> __rows = new Dictionary<int,AiConfig>();
    public Dictionary<int,AiConfig> Rows => __rows;
    // key = AiConfig.Id
    public AiConfig GetRowData( int key )
    {
        AiConfig tmp; 
        if( !__rows.TryGetValue( key, out tmp ) )
            LogError("Can't get row data by key:{0} Config:{1}", key, __config_file_name);
        return tmp;
    }

    public int GetRowCount()
    {
        return __rows.Count;
    }

    public override void ParseConfigure( string text )
    {

        __rows.Clear();
        string splace_text = text.Replace("\r","");
        string[] lines = splace_text.Split(new string[]{"\n"}, System.StringSplitOptions.None);
        
        foreach( string line in lines )
        {
            if( line.Length == 0 )
                continue;
            if( line[0] == '\0' ||line[0] == '#' || line[0] == '%' || line[0] == '$')
                continue;


            string[] rowdata = line.Split(new string[]{","}, System.StringSplitOptions.None);
            if( rowdata.Length != __col_count )
            {
                LogError(string.Format("{0}列数与原配置不符", __config_file_name));
                return;
            }
            int counter = 0;
            AiConfig tmp = new AiConfig();

            string strId = rowdata[counter++];
            if (!string.IsNullOrEmpty(strId))
                tmp.Id = int.Parse(strId);
            tmp.Name = rowdata[counter++];

            string strHeight = rowdata[counter++];
            if (!string.IsNullOrEmpty(strHeight))
                tmp.Height = int.Parse(strHeight);

            string strWeight = rowdata[counter++];
            if (!string.IsNullOrEmpty(strWeight))
                tmp.Weight = int.Parse(strWeight);
            tmp.PersonalSignature = rowdata[counter++];

            string strUnlockCost = rowdata[counter++];
            if (!string.IsNullOrEmpty(strUnlockCost))
                tmp.UnlockCost = int.Parse(strUnlockCost);
            tmp.IconRes = AssetRef.Parse(rowdata[counter++]);
            tmp.Prompt = rowdata[counter++];
            __rows.Add( tmp.Id, tmp );
        }
    }
}